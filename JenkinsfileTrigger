#!/usr/bin/env groovy


pipeline {
    agent {
        label 'master'
    }

    stages {

        stage('decorate-build') {
            steps {
                script {
                    decoratePRBuild()()
                }
            }
        }

        stage('run-tests') {
            parallel {
                stage('centos-aws') {
                    when {
                        expression {
                            sh(returnStatus: true, script: 'git diff  origin/master --name-only | egrep -i "*ami*|*aws*|*ec2*" > /dev/null') == 0
                        }
                    }

                    steps {
                        script {
                            def imageParams = readProperties file: 'environment.aws'

                            if (env.CHANGE_ID) {
                                imageParams['AWS_INSTANCE_NAME'] = "${imageParams['AWS_INSTANCE_NAME']}-PR-${env.CHANGE_ID}"
                                // used to decorate the build
                                imageParams['CHANGE_BRANCH'] = env.CHANGE_BRANCH
                                imageParams['CHANGE_AUTHOR'] = env.CHANGE_AUTHOR
                            } else {
                                imageParams['AWS_INSTANCE_NAME'] = "${imageParams['AWS_INSTANCE_NAME']}-branch-${env.BRANCH_NAME}"
                            }

                            imageParams['credentials'] = [
                                    string(credentialsId: '3e509b47-7263-42dc-ac1e-99bbfaadcfe9', variable: 'AWS_ACCESS_KEY_ID'),
                                    string(credentialsId: '39a3fbf6-f8f9-4fc6-87bc-b294de7636ba', variable: 'AWS_SECRET_ACCESS_KEY'),
                                    string(credentialsId: 'b2f2d0b1-a796-4bdf-92ce-9893729fea3c', variable: 'AWS_SUBNET_ID'),
                                    string(credentialsId: 'befc5c54-2036-4d1d-a3d0-07be98ce8b16', variable: 'AWS_SECURITY_GROUP_ID'),
                                    string(credentialsId: '7177cdc3-2018-43b8-b84d-50f66f7a240a', variable: 'AWS_SECURITY_GROUP'),
                                    string(credentialsId: '1f549343-a22b-4d18-bc3f-87fbe30331a6', variable: 'AWS_KEY_NAME'),
                                    sshUserPrivateKey(credentialsId: 'ab369812-7016-40b4-8747-cb36d0e27f33', keyFileVariable: 'SSH_KEY_LOCATION')
                            ]

                            scheduleBuild(buildName: 'centos-aws-image-build', params: imageParams, triggerRetryCount: 1)
                        }
                    }
                }

                stage('centos-gcp') {
                    when {
                        expression {
                            sh(returnStatus: true, script: 'git diff  origin/master --name-only | egrep -i "*gcp*" > /dev/null') == 0
                        }
                    }

                    steps {
                        script {
                            def imageParams = readProperties file: 'environment.gcp'
                            scheduleBuild(buildName: 'centos-gcp-image-build', params: imageParams, triggerRetryCount: 1)
                        }
                    }
                }
            }
        }
    }
}
